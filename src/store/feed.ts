import { create } from 'zustand';

/**
 * 피드 타입 정의
 *
 * 애플리케이션에서 제공하는 피드의 종류를 정의합니다.
 *
 * 피드 타입:
 * - 'all': 전체 피드 - 모든 사용자의 게시글을 시간순으로 표시
 * - 'hobby': 취미 피드 - 사용자가 선택한 취미와 관련된 게시글만 표시
 *
 * 사용 시나리오:
 * - 사용자가 피드 필터링을 통해 원하는 콘텐츠만 볼 수 있음
 * - 취미별 맞춤 콘텐츠 제공으로 사용자 경험 향상
 * - 전체 피드와 취미별 피드 간의 전환 기능
 */
type FeedType = 'all' | 'hobby';

/**
 * 피드 상태 관리 인터페이스
 *
 * 피드 관련 상태와 액션들을 정의합니다.
 *
 * 상태:
 * - feedType: 현재 선택된 피드 타입 (기본값: 'all')
 *
 * 액션:
 * - setFeedType: 피드 타입 변경 함수
 *
 * 기술적 특징:
 * - 간단한 상태 관리로 빠른 피드 전환
 * - 전역 상태로 컴포넌트 간 피드 타입 공유
 * - Zustand를 통한 효율적인 상태 업데이트
 */
interface FeedState {
  feedType: FeedType;
  setFeedType: (type: FeedType) => void;
}

/**
 * 피드 상태 관리 스토어
 *
 * Zustand를 사용하여 피드 타입을 전역적으로 관리합니다.
 *
 * 주요 기능:
 * 1. 현재 피드 타입 상태 관리
 * 2. 피드 타입 변경 기능
 * 3. 컴포넌트 간 피드 타입 동기화
 *
 * 상태 관리:
 * - feedType: 현재 활성화된 피드 타입
 * - setFeedType: 피드 타입을 변경하는 함수
 *
 * 사용자 경험:
 * - 직관적인 피드 전환 (전체/취미별)
 * - 상태 유지로 페이지 새로고침 시에도 선택된 피드 유지
 * - 빠른 피드 타입 변경으로 콘텐츠 탐색 효율성 향상
 *
 * 컴포넌트 연동:
 * - 피드 컴포넌트에서 현재 피드 타입에 따라 콘텐츠 필터링
 * - 피드 타입 선택 UI에서 상태 변경
 * - 네비게이션 컴포넌트에서 현재 피드 타입 표시
 *
 * 확장성:
 * - 새로운 피드 타입 추가 시 FeedType에 타입 추가
 * - 복잡한 피드 필터링 로직 추가 가능
 * - 피드 설정 저장/복원 기능 확장 가능
 */
export const useFeedStore = create<FeedState>((set) => ({
  /**
   * 현재 피드 타입
   *
   * 기본값은 'all'로 설정되어 애플리케이션 시작 시
   * 전체 피드가 표시됩니다.
   *
   * 값의 의미:
   * - 'all': 모든 게시글을 시간순으로 표시
   * - 'hobby': 사용자 취미와 관련된 게시글만 표시
   */
  feedType: 'all',

  /**
   * 피드 타입 변경 함수
   *
   * 사용자가 피드 타입을 변경할 때 호출되는 함수입니다.
   *
   * 처리 과정:
   * 1. 새로운 피드 타입을 매개변수로 받음
   * 2. Zustand의 set 함수를 사용하여 상태 업데이트
   * 3. 모든 구독 컴포넌트에 변경 사항 전파
   *
   * 사용 시나리오:
   * - 사용자가 피드 필터 버튼 클릭
   * - 탭 전환을 통한 피드 타입 변경
   * - 설정에서 기본 피드 타입 변경
   *
   * 성능 최적화:
   * - 불필요한 리렌더링 방지를 위한 상태 업데이트 최적화
   * - 동일한 타입으로의 중복 호출 시 상태 변경 없음
   *
   * @param type - 변경할 피드 타입 ('all' | 'hobby')
   */
  setFeedType: (type) => set({ feedType: type }),
}));
