/**
 * 날짜 관련 유틸리티 함수 모음
 *
 * 애플리케이션에서 사용되는 날짜 포맷팅 및 시간 계산 함수들을 제공합니다.
 *
 * 주요 기능:
 * 1. 날짜를 'YY.MM.DD' 형식으로 포맷팅
 * 2. 현재 날짜 조회
 * 3. 남은 시간을 사용자 친화적 형식으로 변환
 *
 * 기술적 특징:
 * - TypeScript를 통한 타입 안전성
 * - 다양한 입력 타입 지원 (Date 객체, 문자열)
 * - 일관된 날짜 형식 제공
 * - 사용자 친화적인 시간 표시
 *
 * 사용 목적:
 * - UI에서 날짜 표시 표준화
 * - 사용자에게 직관적인 시간 정보 제공
 * - 애플리케이션 전반의 날짜 처리 일관성
 */

/**
 * Date 객체나 날짜 문자열을 'YY.MM.DD' 형식으로 변환합니다.
 *
 * 입력된 날짜를 한국어 사용자에게 친숙한 형식으로 변환합니다.
 *
 * 처리 과정:
 * 1. 입력 타입 확인 (Date 객체 또는 문자열)
 * 2. 문자열인 경우 Date 객체로 변환
 * 3. 년, 월, 일 추출 및 포맷팅
 * 4. 'YY.MM.DD' 형식으로 조합
 *
 * 포맷팅 규칙:
 * - 년도: 4자리에서 뒤 2자리만 사용 (예: 2025 → 25)
 * - 월: 2자리로 패딩 (예: 1 → 01)
 * - 일: 2자리로 패딩 (예: 5 → 05)
 *
 * 에러 처리:
 * - 잘못된 날짜 문자열 입력 시 Invalid Date 처리
 * - null/undefined 입력 시 안전한 처리
 *
 * @param date - Date 객체 또는 날짜 문자열
 * @returns 'YY.MM.DD' 형식의 문자열
 *
 * @example
 * formatDate(new Date('2025-01-01')) // '25.01.01'
 * formatDate('2025-01-01') // '25.01.01'
 * formatDate('2025-12-25') // '25.12.25'
 * formatDate(new Date()) // 현재 날짜 기준 'YY.MM.DD'
 */
export const formatDate = (date: Date | string): string => {
  // ===== 입력 타입 처리 =====

  /**
   * 입력된 날짜를 Date 객체로 변환합니다.
   *
   * 처리 로직:
   * - 문자열인 경우: new Date(date)로 Date 객체 생성
   * - Date 객체인 경우: 그대로 사용
   *
   * 주의사항:
   * - 잘못된 날짜 문자열은 Invalid Date가 될 수 있음
   * - 브라우저 호환성을 고려한 날짜 문자열 형식 사용 권장
   */
  const targetDate = typeof date === 'string' ? new Date(date) : date;

  // ===== 날짜 구성 요소 추출 및 포맷팅 =====

  /**
   * 년도를 2자리로 변환합니다.
   *
   * 처리 과정:
   * 1. getFullYear()로 4자리 년도 추출
   * 2. String()으로 문자열 변환
   * 3. slice(-2)로 뒤 2자리만 추출
   *
   * 예시:
   * - 2025 → '2025' → '25'
   * - 1999 → '1999' → '99'
   */
  const year = String(targetDate?.getFullYear()).slice(-2);

  /**
   * 월을 2자리로 포맷팅합니다.
   *
   * 처리 과정:
   * 1. getMonth()로 월 추출 (0-11 범위)
   * 2. +1로 실제 월로 변환 (1-12 범위)
   * 3. String()으로 문자열 변환
   * 4. padStart(2, '0')로 2자리 패딩
   *
   * 예시:
   * - 1월: 0+1=1 → '1' → '01'
   * - 12월: 11+1=12 → '12' → '12'
   */
  const month = String(targetDate?.getMonth() + 1).padStart(2, '0');

  /**
   * 일을 2자리로 포맷팅합니다.
   *
   * 처리 과정:
   * 1. getDate()로 일 추출 (1-31 범위)
   * 2. String()으로 문자열 변환
   * 3. padStart(2, '0')로 2자리 패딩
   *
   * 예시:
   * - 1일: 1 → '1' → '01'
   * - 15일: 15 → '15' → '15'
   * - 31일: 31 → '31' → '31'
   */
  const day = String(targetDate?.getDate()).padStart(2, '0');

  // ===== 최종 형식 조합 =====

  /**
   * 추출된 년, 월, 일을 'YY.MM.DD' 형식으로 조합합니다.
   *
   * 형식: ${year}.${month}.${day}
   *
   * 최종 결과 예시:
   * - '25.01.01' (2025년 1월 1일)
   * - '24.12.25' (2024년 12월 25일)
   * - '99.03.15' (1999년 3월 15일)
   */
  return `${year}.${month}.${day}`;
};

/**
 * 현재 날짜를 'YY.MM.DD' 형식으로 반환합니다.
 *
 * 시스템의 현재 날짜를 가져와서 표준 형식으로 포맷팅합니다.
 *
 * 처리 과정:
 * 1. new Date()로 현재 날짜 생성
 * 2. formatDate() 함수를 사용하여 포맷팅
 * 3. 포맷팅된 문자열 반환
 *
 * 사용 시나리오:
 * - 오늘 날짜 표시
 * - 기본 날짜값 설정
 * - 날짜 비교 기준점
 *
 * 특징:
 * - 실시간으로 현재 날짜 반영
 * - formatDate() 함수 재사용으로 일관성 보장
 * - 간단하고 직관적인 API
 *
 * @returns 'YY.MM.DD' 형식의 문자열
 *
 * @example
 * getCurrentDate() // '24.03.21' (현재 날짜 기준)
 * getCurrentDate() // '25.01.15' (2025년 1월 15일 기준)
 */
export const getCurrentDate = (): string => {
  return formatDate(new Date());
};

/**
 * 남은 시간을 시, 분, 초로 변환하여 사용자 친화적 형식으로 반환합니다.
 *
 * 초 단위의 시간을 일, 시간, 분 단위로 변환하여
 * 사용자가 이해하기 쉬운 형태로 표시합니다.
 *
 * 처리 과정:
 * 1. 전체 초를 일, 시간, 분으로 분할 계산
 * 2. 각 단위별로 정수 부분만 추출
 * 3. 한국어 형식으로 조합
 *
 * 계산 로직:
 * - 일: 전체 초 ÷ (24 × 60 × 60)
 * - 시간: 나머지 초 ÷ (60 × 60)
 * - 분: 나머지 초 ÷ 60
 *
 * 표시 형식:
 * - "X일 Y시간 Z분 남음"
 * - 0인 단위는 표시하지 않음 (예: "2일 30분 남음")
 *
 * 사용 시나리오:
 * - 챌린지 마감 시간 표시
 * - 이벤트 종료 시간 표시
 * - 타이머 기능
 *
 * @param seconds - 변환할 시간 (초 단위)
 * @returns 사용자 친화적인 시간 형식 문자열
 *
 * @example
 * formatRemainingTime(86400) // '1일 0시간 0분 남음'
 * formatRemainingTime(3661) // '0일 1시간 1분 남음'
 * formatRemainingTime(180) // '0일 0시간 3분 남음'
 * formatRemainingTime(0) // '0일 0시간 0분 남음'
 */
export const formatRemainingTime = (seconds: number) => {
  // ===== 시간 단위별 계산 =====

  /**
   * 일 단위 계산
   *
   * 전체 초를 일 단위로 변환합니다.
   * 1일 = 24시간 × 60분 × 60초 = 86,400초
   *
   * 계산: Math.floor(seconds / (24 * 60 * 60))
   *
   * 예시:
   * - 86,400초 → 1일
   * - 172,800초 → 2일
   * - 43,200초 → 0일 (12시간)
   */
  const days = Math.floor(seconds / (24 * 60 * 60));

  /**
   * 시간 단위 계산
   *
   * 일 단위를 제외한 나머지 시간을 시간 단위로 변환합니다.
   * 1시간 = 60분 × 60초 = 3,600초
   *
   * 계산: Math.floor((seconds % (24 * 60 * 60)) / (60 * 60))
   *
   * 예시:
   * - 86,400초 → 0시간 (1일이므로)
   * - 3,600초 → 1시간
   * - 7,200초 → 2시간
   */
  const hours = Math.floor((seconds % (24 * 60 * 60)) / (60 * 60));

  /**
   * 분 단위 계산
   *
   * 시간 단위를 제외한 나머지 시간을 분 단위로 변환합니다.
   * 1분 = 60초
   *
   * 계산: Math.floor((seconds % (60 * 60)) / 60)
   *
   * 예시:
   * - 3,600초 → 0분 (1시간이므로)
   * - 60초 → 1분
   * - 120초 → 2분
   */
  const minutes = Math.floor((seconds % (60 * 60)) / 60);

  // ===== 최종 형식 조합 =====

  /**
   * 계산된 일, 시간, 분을 한국어 형식으로 조합합니다.
   *
   * 형식: "X일 Y시간 Z분 남음"
   *
   * 특징:
   * - 모든 단위를 항상 표시
   * - 0인 경우에도 표시하여 일관성 유지
   * - "남음" 텍스트로 남은 시간임을 명확히 표시
   *
   * 최종 결과 예시:
   * - "1일 2시간 30분 남음"
   * - "0일 5시간 15분 남음"
   * - "2일 0시간 0분 남음"
   */
  return `${days}일 ${hours}시간 ${minutes}분 남음`;
};
